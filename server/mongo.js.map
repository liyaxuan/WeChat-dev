{"version":3,"sources":["mongo.es6.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAI,SAAS,QAAQ,SAAR,EAAmB,WAAnB;;AAEb,IAAI,QAAQ,SAAR,KAAQ,OAAsD;KAAnD,eAAmD;KAA9C,qBAA8C;2BAAtC,UAAsC;KAAtC,2CAAY,oBAA0B;4BAAtB,WAAsB;KAAtB,6CAAa,qBAAS;;AACjE,QAAO,OAAO,OAAP,CAAe,sCAAf,EAAuD,IAAvD,CAA4D,UAAC,EAAD,EAAQ;AAC1E,MAAG,UAAU,MAAV,EACF,IAAI,UAAU,GAAG,UAAH,CAAc,GAAd,EAAmB,MAAnB,EAA2B,SAA3B,EAAsC,OAAtC,EAAV,CADL,KAEK,IAAG,UAAU,QAAV,EACP,IAAI,UAAU,GAAG,UAAH,CAAc,GAAd,EAAmB,MAAnB,EAA2B,SAA3B,EAAsC,UAAtC,EAAkD;AAC/D,UAAO,IAAP;GADa,CAAV,CADA,KAIA,IAAG,UAAU,QAAV,EACP,IAAI,UAAU,GAAG,UAAH,CAAc,GAAd,EAAmB,MAAnB,EAA2B,SAA3B,CAAV,CADA,KAEA,IAAG,UAAU,QAAV,EACP,IAAI,UAAU,GAAG,UAAH,CAAc,GAAd,EAAmB,MAAnB,EAA2B,UAA3B,CAAV,CADA,KAEA;OAGA,QAHA;;;AACJ,QAAI,MAAS,0BAAT;AACJ,YAAQ,GAAR,CAAY,GAAZ;AACI,cAAU,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC9C,YAAO,GAAP,EAD8C;KAArB,CAAtB;QAHA;GAFA;AASL,SAAO,OAAP,CAlB0E;EAAR,EAmBhE,UAAC,GAAD,EAAS;AACX,UAAQ,GAAR,CAAY,GAAZ,EADW;EAAT,CAnBH,CADiE;CAAtD;;AAyBZ,IAAI,kBAAkB,SAAlB,eAAkB,CAAC,GAAD,EAAS;AAC9B,QAAO,UAAU,GAAV,EAAe;AACrB,MAAI,IAAJ,CAAS,EAAE,QAAQ,MAAR,EAAgB,MAAM,GAAN,EAA3B,EADqB;EAAf,CADuB;CAAT;;QAMb;QAAO","file":"mongo.js","sourcesContent":["let client = require('mongodb').MongoClient;\r\n\r\nlet mongo = ({ col, method, queryData = {}, updateData = {} }) => {\r\n\treturn client.connect('mongodb://127.0.0.1:27017/talkscript').then((db) => {\r\n\t\tif(method == 'find')\r\n\t\t\tvar promise = db.collection(col)[method](queryData).toArray();\r\n\t\telse if(method == 'update')\r\n\t\t\tvar promise = db.collection(col)[method](queryData, updateData, {\r\n\t\t\t\tmulti: true\r\n\t\t\t});\r\n\t\telse if(method == 'delete')\r\n\t\t\tvar promise = db.collection(col)[method](queryData);\r\n\t\telse if(method == 'insert')\r\n\t\t\tvar promise = db.collection(col)[method](updateData);\r\n\t\telse {\r\n\t\t\tlet err = `${method} is not allowed`;\r\n\t\t\tconsole.log(err);\r\n\t\t\tvar promise = new Promise((resolve, reject) => {\r\n\t\t\t\treject(err);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn promise;\r\n\t}, (err) => {\r\n\t\tconsole.log(err);\t\r\n\t});\r\n};\r\n\r\nlet mongoErrHandler = (res) => {\r\n\treturn function (err) {\r\n\t\tres.json({ result: 'fail', code: err });\r\n\t};\r\n};\r\n\r\nexport { mongo, mongoErrHandler };"],"sourceRoot":"/source/"}